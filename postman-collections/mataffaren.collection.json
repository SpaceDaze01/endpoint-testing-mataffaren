{
	"info": {
		"_postman_id": "e4c66195-4308-46e6-9718-8f58cc55fe44",
		"name": "mataffaren_postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33840953",
		"_collection_link": "https://hayden-and-sara.postman.co/workspace/Hayden-and-Sara-Workspace~5ce0d21d-4ac4-49c8-b781-e6cdde6c60ab/collection/33840953-e4c66195-4308-46e6-9718-8f58cc55fe44?action=share&source=collection_link&creator=33840953"
	},
	"item": [
		{
			"name": "get first page",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('domain', 'http://localhost:4000');\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"     })\r",
							"    \r",
							"\r",
							"\r",
							"pm.test('There should be at least 10 main categories', () => {\r",
							"  pm.expect(responseData.children.length).to.be.at.least(10);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Each main category should have the properties title and url', () => {\r",
							"    for(let category of responseData.children){        \r",
							"        pm.expect(!!category.title).to.be.true;\r",
							"        pm.expect(!!category.url).to.be.true;\r",
							"        pm.expect(category.title).to.be.string;\r",
							"        pm.expect(category.url).to.be.string;\r",
							"    }\r",
							"});\r",
							"\r",
							"\r",
							"pm.variables.set('categoryData', responseData);\r",
							"\r",
							"pm.variables.set('categoryCounter', 0);    "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/leftMenu/categorytree",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"leftMenu",
						"categorytree"
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - kott, chark och fagel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each product should have a valid 'img' property\", function () {\r",
							"    pm.expect(pm.response.json().results).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    pm.response.json().results.forEach((product, index) => {\r",
							"        console.log(`Checking product at index ${index}:`, product);\r",
							"        \r",
							"        pm.expect(product).to.have.property('image').that.is.an('object').and.to.have.property('url').that.is.a('string').and.is.not.empty;\r",
							"        \r",
							"       \r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"    \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"    \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'compareprice-asc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('compareprice-asc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults;\r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure there are products on the first page\", function () {\r",
							"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Results should be an array and not empty\", function () {\r",
							"    pm.expect(responseJson.results).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"responseJson.results.forEach(function(product, index) {\r",
							"    \r",
							"    pm.test(`Product ${index + 1} should have a valid 'price.value'`, function() {\r",
							"        let price = product.price;\r",
							"        \r",
							"        if (price && price.value !== undefined) {\r",
							"            pm.expect(price.value).to.be.a('number').that.is.greaterThan(0);\r",
							"        } else {\r",
							"            pm.expect(price).to.exist; \r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/kott-chark-och-fagel?size=30&page=0&{{jämnförsprisBilligastTillDyrast}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"kott-chark-och-fagel"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{jämnförsprisBilligastTillDyrast}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - vegetariskt",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each product should have a valid 'img' property\", function () {\r",
							"    pm.expect(pm.response.json().results).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    pm.response.json().results.forEach((product, index) => {\r",
							"       \r",
							"        console.log(`Checking product at index ${index}:`, product);\r",
							"        \r",
							"        pm.expect(product).to.have.property('image').that.is.an('object').and.to.have.property('url').that.is.a('string').and.is.not.empty;\r",
							"        \r",
							"       \r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"    \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"\r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'topRated'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('topRated');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults; \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ensure there are products on the first page\", function () {\r",
							"    pm.expect(pm.response.json().results.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"\r",
							"let responseJson = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Results should be an array and not empty\", function () {\r",
							"    pm.expect(responseJson.results).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"responseJson.results.forEach(function(product, index) {\r",
							"    \r",
							"    pm.test(`Product ${index + 1} should have a valid 'price.value'`, function() {\r",
							"        let price = product.price;\r",
							"        \r",
							"        if (price && price.value !== undefined) {\r",
							"            pm.expect(price.value).to.be.a('number').that.is.greaterThan(0);\r",
							"        } else {\r",
							"            pm.expect(price).to.exist; \r",
							"        }\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/vegetariskt?size=30&page=0&{{populärast}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"vegetariskt"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{populärast}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get specific product info - Vegofars fryst (anamma)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Product should have a valid 'image.url' and 'thumbnail.url'\", function () {\r",
							"    \r",
							"    const imageUrl = pm.response.json().image.url;\r",
							"    pm.expect(imageUrl).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(imageUrl).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/); \r",
							"\r",
							"    const thumbnailUrl = pm.response.json().thumbnail.url;\r",
							"    pm.expect(thumbnailUrl).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(thumbnailUrl).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/);  \r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Description should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const description = response.description;\r",
							"\r",
							"    pm.expect(description).to.not.be.empty;\r",
							"    pm.expect(description).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Consumer storage instructions should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const storageInstructions = response.consumerStorageInstructions;\r",
							"\r",
							"    pm.expect(storageInstructions).to.not.be.empty;\r",
							"    pm.expect(storageInstructions).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Ingredients should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const ingredients = response.ingredients;\r",
							"\r",
							"    pm.expect(ingredients).to.not.be.empty;\r",
							"    pm.expect(ingredients).to.be.a('string');\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/axfood/rest/p/{{vegofärsFryst}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"axfood",
						"rest",
						"p",
						"{{vegofärsFryst}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - mejeri, ost och agg",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"    \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"    \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'name-asc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('name-asc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults;  \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/mejeri-ost-och-agg?size=30&page=0&{{A-Ö}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"mejeri-ost-och-agg"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{A-Ö}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get underkategori - mjolk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"     \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"    \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'compareprice-desc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('compareprice-desc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults; \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/mejeri-ost-och-agg/mjolk?size=30&page=0&{{jämnförsprisDyrastTillBilligast}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"mejeri-ost-och-agg",
						"mjolk"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{jämnförsprisDyrastTillBilligast}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - lotter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"    \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"    \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'price-asc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('price-asc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults; \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5173/api/c/lotter?size=30&page=0&{{BilligastTillDyrast}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5173",
					"path": [
						"api",
						"c",
						"lotter"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{BilligastTillDyrast}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - dryck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"    \r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							"    \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'name-desc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('name-desc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults; \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/dryck?size=30&page=0&{{Ö-A}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"dryck"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{Ö-A}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get category - Barn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.not.be.empty;\r",
							"    pm.expect(categoryInfo).to.be.an('object');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info should contain required fields\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo).to.have.property('code');\r",
							"    pm.expect(categoryInfo).to.have.property('name');\r",
							"    pm.expect(categoryInfo).to.have.property('url');\r",
							"    pm.expect(categoryInfo).to.have.property('sequence');\r",
							"});\r",
							"\r",
							"pm.test(\"Category Info 'code' should follow the expected format\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const categoryInfo = response.categoryInfo;\r",
							"\r",
							"    pm.expect(categoryInfo.code).to.match(/^[A-Za-z0-9]+$/);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The correct sorting option is selected\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sorts = response.sorts;\r",
							"    \r",
							"    const selectedSort = sorts.find(sort => sort.selected === true);\r",
							"\r",
							"    pm.expect(selectedSort).to.not.be.undefined;\r",
							" \r",
							"    pm.expect(selectedSort.code).to.be.oneOf([\r",
							"        \"topRated\", \r",
							"        \"name-asc\", \r",
							"        \"name-desc\", \r",
							"        \"price-asc\", \r",
							"        \"price-desc\", \r",
							"        \"compareprice-asc\", \r",
							"        \"compareprice-desc\"\r",
							"    ]);\r",
							"});\r",
							"\r",
							"pm.test(\"Current page should be within valid range\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const currentPage = response.pagination.currentPage;\r",
							"    const totalPages = response.pagination.numberOfPages;\r",
							"\r",
							"    pm.expect(currentPage).to.be.a('number').that.is.greaterThanOrEqual(0).and.is.lessThan(totalPages);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"The sort option should be 'price-desc'\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const sort = response.pagination.sort;\r",
							"\r",
							"    pm.expect(sort).to.equal('price-desc');\r",
							"});\r",
							"\r",
							"\r",
							"const pageSize = pm.response.json().pagination.pageSize; \r",
							"const totalResults = pm.response.json().pagination.totalNumberOfResults; \r",
							"const numberOfPages = pm.response.json().pagination.numberOfPages; \r",
							"\r",
							"const maxExpectedResults = pageSize * numberOfPages;\r",
							"\r",
							"const allProductsInCategoriesCount = pm.response.json().pagination.allProductsInCategoriesCount;\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products matches pagination\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.eql(totalResults);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of products is within expected range\", function () {\r",
							"    pm.expect(allProductsInCategoriesCount).to.be.lessThanOrEqual(maxExpectedResults);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/c/barn?size=30&page=0&{{DyrastTillBilligast}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"c",
						"barn"
					],
					"query": [
						{
							"key": "size",
							"value": "30"
						},
						{
							"key": "page",
							"value": "0"
						},
						{
							"key": "{{DyrastTillBilligast}}",
							"value": null
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "get specific product info - Sverigelotten Bla Standard",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('The response time should be below 1 second', () => {\r",
							"     pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Product should have a valid 'image.url' and 'thumbnail.url'\", function () {\r",
							"\r",
							"    const imageUrl = pm.response.json().image.url;\r",
							"    pm.expect(imageUrl).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(imageUrl).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/); \r",
							"\r",
							"    const thumbnailUrl = pm.response.json().thumbnail.url;\r",
							"    pm.expect(thumbnailUrl).to.be.a('string').that.is.not.empty;\r",
							"    pm.expect(thumbnailUrl).to.match(/^https?:\\/\\/[^\\s$.?#].[^\\s]*$/); \r",
							"});\r",
							"\r",
							"//ska inte gå igenom eftersom produkten saknar beskrivning\r",
							"pm.test(\"Description should be present and not empty\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const description = response.description;\r",
							"\r",
							"    pm.expect(description).to.not.be.empty;\r",
							"    pm.expect(description).to.be.a('string');\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{domain}}/api/axfood/rest/p/{{SverigelottenBlåStandard}}",
					"host": [
						"{{domain}}"
					],
					"path": [
						"api",
						"axfood",
						"rest",
						"p",
						"{{SverigelottenBlåStandard}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "domain",
			"value": "http://localhost:4000"
		},
		{
			"key": "vegofärsFryst",
			"value": "101275800_ST"
		},
		{
			"key": "ost",
			"value": "ost"
		},
		{
			"key": "populärast",
			"value": "sort=topRated"
		},
		{
			"key": "A-Ö",
			"value": "sort=name-asc"
		},
		{
			"key": "jämnförsprisBilligastTillDyrast",
			"value": "sort=compareprice-asc"
		},
		{
			"key": "jämnförsprisDyrastTillBilligast",
			"value": "sort=compareprice-desc"
		},
		{
			"key": "Ö-A",
			"value": "sort=name-desc"
		},
		{
			"key": "BilligastTillDyrast",
			"value": "sort=price-asc"
		},
		{
			"key": "DyrastTillBilligast",
			"value": "sort=price-desc"
		},
		{
			"key": "SverigelottenBlåStandard",
			"value": "100010710_ST"
		}
	]
}